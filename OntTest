package pl.edu.agh.pcontology.tests;

import static com.hp.hpl.jena.assembler.JA.OntModel;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.sparql.vocabulary.FOAF;
import com.hp.hpl.jena.vocabulary.VCARD;
import com.hp.hpl.jena.rdf.model.ModelFactoryBase;
import com.hp.hpl.jena.vocabulary.RDFS;
import org.apache.jena.riot.RDFFormat;
import org.apache.jena.riot.RDFDataMgr;

public class OntTest {
	private final static String NS = "http://agh.edu.pl/pcontology/";
   //     public static RDFFormatVariant ABBREV       = new RDFFormatVariant("pretty" ) ;
	
	public static void main(String[] args){
            
            	/*	
		Model mdl = ModelFactory.createDefaultModel();
		Resource patent = mdl.createResource(NS + "patent");
		Resource inventor = mdl.createResource(NS + "inventor");
		Resource content = mdl.createResource(NS + "content");
		
		Resource information = mdl.createResource(NS + "information");
		Resource metadata = mdl.createResource(NS + "metadata");
		Resource abstr = mdl.createResource(NS + "abstract");
		Resource title = mdl.createResource(NS + "title");
		Resource description = mdl.createResource(NS + "description");
		Resource claim = mdl.createResource(NS + "claim");
		
		Resource appID = mdl.createResource(NS + "appID");
		Resource classification = mdl.createResource(NS + "classification");
		Resource cpc = mdl.createResource(NS + "cpc");
		Resource ipc = mdl.createResource(NS + "ipc");
		
		Property contains = mdl.createProperty(NS + "contains");
		
		mdl.add(patent, FOAF.maker, inventor);
		mdl.add(patent, contains, content);
		
		mdl.add(content, contains, information);
		mdl.add(content, contains, metadata);
		
		mdl.add(information, contains, abstr);
		mdl.add(information, contains, title);
		mdl.add(information, contains, description);
		mdl.add(information, contains, claim);
		
		mdl.add(metadata, contains, classification);
		mdl.add(metadata, contains, appID);
		
		mdl.add(classification, contains, cpc);
		mdl.add(classification, contains, ipc);
		
            */
            
            
            Model mdl = ModelFactory.createDefaultModel();
            
            Property contains = mdl.createProperty(NS + "contains");
            
            Resource stomatology = mdl.createResource(NS + "stomatology");
            Resource stomatologyKeywords = mdl.createResource(NS + "human, necessities, health, life-saving, amusement, medical, hygiene, dentistry");
            
            Resource DentalToolsOrInstruments = mdl.createResource(NS + "Dental tools or instruments");
            Resource DentalToolsOrInstrumentsKeywords = mdl.createResource(NS + "human, necessities, health, life-saving, amusement, medical, hygiene, dentistry, apparatus, methods, oral, dental, tool, instrument");
            
            Resource DentalMachinesForBoringOrCutting = mdl.createResource(NS + "Dental machines for boring or cutting ");
            Resource DentalMachinesForBoringOrCuttingKeywords = mdl.createResource(NS + "human, necessities, health, life-saving, amusement, medical, hygiene, dentistry, apparatus, methods, oral, dental, dental machine, boring, cutting");
                       
            Resource CharacterisedByTheDriveOfTheDentalTools = mdl.createResource(NS + "Characterised by the drive of the dental tools ");
            Resource CharacterisedByTheDriveOfTheDentalToolsKeywords = mdl.createResource(NS + "human, necessities, health, life-saving, amusement, medical, hygiene, dentistry, apparatus, methods, oral, dental, dental machine, boring, cutting, drive, tool, characterized, treadle, manual, turbine, electric, vibratory, ultrasonic");
            
            
                     
            
            mdl.add(stomatology, contains, stomatologyKeywords);
            mdl.add(stomatology, contains, DentalMachinesForBoringOrCutting);
            mdl.add(stomatology, contains, DentalToolsOrInstruments);
            
            mdl.add(DentalToolsOrInstruments, contains, DentalToolsOrInstrumentsKeywords);
            
            mdl.add(DentalMachinesForBoringOrCutting, contains, DentalMachinesForBoringOrCuttingKeywords);
            mdl.add(DentalMachinesForBoringOrCutting, contains, CharacterisedByTheDriveOfTheDentalTools);
            
            mdl.add(CharacterisedByTheDriveOfTheDentalTools, contains, CharacterisedByTheDriveOfTheDentalToolsKeywords);
                 
           
            mdl.write(System.out, "Turtle");
                
              
          
	}

}
